{
  hostname_prefix = 'Gib mir einen Namen ',
  site_name = 'Freifunk Cuxhaven',
  site_code = 'ffcux',
  domain_seed = '76fcdc1a154403e8dbe79e72186688323526377894513623203d371f54b46258',
  
  opkg = {
    openwrt = 'http://opkg.services.ffki/openwrt/snapshots/packages/%A',
    extra = {
      gluon = 'http://opkg.services.ffki/modules/gluon-%GS-%GR/%S',
    },
  },
  
  prefix4 = '10.115.0.0/19',
  prefix6 = 'fdec:c0f1:afda::/64',
  
  timezone = 'CET-1CEST,M3.5.0,M10.5.0/3', -- Europe/Berlin
  ntp_servers = {'ntp.service.ffcux'},
  
  -- Wireless regulatory domain of your community.
  regdom = 'DE',
  
  config_mode = {
    hostname = {
      optional = false,
    },
    geo_location = {
      -- Show/hide the altitude field
      show_altitude = true,
      -- for gluon-config-mode-geo-location-osm
      osm = {
        center = {
          lat = 53.76657,
          lon = 8.69773,
        },
        zoom = 11,
      },
    },
    remote_login = {
      show_password_form = true,
      min_password_length = 16,
    },
  },
  
  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    channel = 6,
    supported_rates = {6000, 9000, 12000, 18000, 24000, 36000, 48000, 54000},
    
    -- List of basic wifi rates (optional, required if supported_rates is set)
    -- without 802.11b compatibility for better performance
    basic_rate = {6000, 9000, 18000, 36000, 54000},
    
    -- ESSID used for client network.
    ap = {
      ssid = 'cuxhaven.freifunk.net',
    },
    mesh = {
      id = '05:ca:ff:ee:ba:be',
      mcast_rate = 12000,
    },
  },
  
  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel.
  wifi5 = {
    channel = 44,
    ap = {
      ssid = 'cuxhaven.freifunk.net',
    },
    mesh = {
      id = '05:ca:ff:ee:ba:be',
      mcast_rate = 12000,
    },
  },
  
  dns = {
    servers = {'2a06:e881:2000:7::1','2001:41d0:700:687:0:0:0:5'},
  },
  
  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  next_node = {
    name = { 'node.ffcux', 'nextnode', 'nn' },
    ip4 = '10.115.31.254',
    ip6 = 'fdec:c0f1:afda::127',
    mac = '36:ff:e1:d1:62:82',
  },
  
  mesh = {
    vxlan = true,
    batman_adv = {
      gw_sel_class = 1, --class 1 is calculated from both the TQ and the announced bandwidth.
    },
  },
  
  -- optional; Enables the mesh on the WAN port (true or false).
  -- mesh_on_wan = true,
  
  --optional; Enables the mesh on the LAN port (true or false).
  -- mesh_on_lan = true,
  
  mesh_vpn = {
    enabled = true,
    mtu = 1312,
    fastd = {
      methods = { 'salsa2012+umac', 'null' },
      configurable = true,
      groups = {
        backbone = {
          -- Limit number of connected peers to reduce bandwidth.
          limit = 1,
          peers = {
            ffcux_gw01 = {
              key ='91222ad29ff1ec0249a4bc5a6fb867445c5233417529b7131b6be9d40c93bcd6',
              remotes = {'"gw01.ffcux.de" port 10000'},
            },
            ffcux_gw02 = {
              key ='f51dba27e235c2d2644555cf9770c40b2c787ce54e38d9440aa278a08ab6916a',
              remotes = {'"gw01.ffcux.de" port 10001'},
            },
          },
        },
      },
    },
    
    bandwidth_limit = {
      enabled = false,
      egress = 1800,
      ingress = 14400,
    },
  },
  mesh_on_wan = false,
  mesh_on_lan = false,
  poe_passthrough = false,
  
  autoupdater = {
    branch = 'stable',
    branches = {
      stable = {
        name = 'stable',
        mirrors = {
          -- List of mirrors to fetch images from. IPv6 required!
          'http://[fdec:c0f1:afda::fd00]/firmware/stable/sysupgrade',
        },
        good_signatures = 2,
        pubkeys = {
          '6b18738f0ba9a7aeae7f598829c52ffe0f68a0f25bce214324c43df3ce5fd2db', -- borsal
          '381137cadde6e9907da687a9b8f5322ac451168ebec7c800b304cdb3d1ba9b26', -- heini66                            
          '22c79b193a36269fd7fd51531e762b776e982926c90822df80b56f2be11648d4', -- bjo
          '1f45d9be8a07cc2b6fcc384c71685fc0895a54be0d884aa4637c93ec4f36d970', -- stefan6
          '589695821488c9acd2efc26c2fdde259b25615cbfdbb6a434e95e33fa6932023', -- Tarnatos
          '9885f836464abf3633f92701e4febeefec54f481d8b6cd39085e6ad24162ff82', -- rubo77
          '359ec3619184f1bdfe26515cf5ba2b016ba23489db2a371cbf5c3cee9d061110', -- Sven (FL)
          
        },
      },
    },
  },
  
  ssid_changer = {
    switch_timeframe = 60,  -- only once every timeframe (in minutes) the SSID will change to OFFLINE 
                            -- set to 1440 to change once a day
                            -- set to 1 minute to change every time the router gets offline
    first = 5,              -- the first few minutes directly after reboot within which an Offline-SSID always may be activated
    prefix = 'FF_OFFLINE_', -- use something short to leave space for the nodename (no '~' allowed!)
    suffix = 'nodename',    -- generate the SSID with either 'nodename', 'mac' or to use only the prefix: 'none'
    
    tq_limit_enabled = false, -- if false, the offline SSID will only be set if there is no gateway reacheable
                            -- upper and lower limit to turn the offline_ssid on and off
                            -- in-between these two values the SSID will never be changed to prevent it from toggeling every minute.
                            -- TODO: enabled=1 still has to be implemented
    tq_limit_max = 55,      -- upper limit, above that the online SSID will be used
    tq_limit_min = 45       -- lower limit, below that the offline SSID will be used
  },
}
